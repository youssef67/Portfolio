{% extends 'base.html.twig' %}

{% block title %}Kata {{ kata }}{% endblock %}

{% block body %}
{% include "navbar.html.twig" %}

<section class="single-post-wrapper single-col-max-width py-5 px-4 mx-auto">
    <div class="section-row">
        <div class="mb-5"><a class="btn btn-primary" href="{{ path("project", {'project' : 'codewar'}) }}" target="_blank"><i class="fas  fa-arrow-left mr-2"></i>Revenir au projet</a></div>
    </div>
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}    
{% if kata == "ipValidation" %}

    <div class="divider"><span></span><span>{{kata}}</span><span></span></div>
    <div class="section-row">
        <p>Write an algorithm that will identify valid IPv4 addresses in dot-decimal format. IPs should be considered valid if they consist of four octets, with values between 0 and 255, inclusive.
            Input to the function is guaranteed to be a single string.</p>

        <h4 class="mb-3">Résultat du kata</h4>
        <div class="mb-5">
            <pre><code class="php">
&lt?php

function isValid(string $str)
{
    if ( !preg_match( "/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/", $str))
        return false;

    return true;    
}

function isValidIP(string $str): bool
{
    return filter_var($str, FILTER_VALIDATE_IP);
}

var_dump(isValid('123.45.67.89'));
            </code></pre>
        </div>
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{% elseif kata == "maximumDifference"%}

<div class="divider"><span></span><span>{{kata}}</span><span></span></div>
<div class="section-row">
    <p>You are given two arrays a1 and a2 of strings. Each string is composed with letters from a to z. Let x be any string in the first array and y be any string in the second array.
        Find max(abs(length(x) − length(y)))
        If a1 and/or a2 are empty return -1 in each language except in Haskell (F#) where you will return Nothing (None).</p>

    <h4 class="mb-3">Résultat du kata</h4>
    <div class="mb-5">
        <pre><code class="php">
&lt?php

function mxdiflg($a1, $a2)
{
    if (empty($a1) || empty($a2))
    {
        return -1;
    }
    else
    {
        $highValue = "0";
    
        foreach ($a1 as $v1)
        {
            foreach ($a2 as $v2)
            {
                $diffNumber = (int)abs(strlen($v1) - strlen($v2));
                ($diffNumber > $highValue) ? $highValue = $diffNumber : $highValue;
            }
        }
        
        return $highValue;
    }

}

function mxdiflgBestPractice($a1, $a2)
{
    if (empty($a1) || empty($a2)) { return -1; }
    $a1 = array_map('strlen', $a1);
    $a2 = array_map('strlen', $a2);

    return max(abs(min($a1) - max($a2)), abs(min($a2) - abs(max($a1))));
}
        </code></pre>
    </div>
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
    {% elseif kata == "divisors"%}

    <div class="divider"><span></span><span>{{kata}}</span><span></span></div>
    <div class="section-row">
        <p>Create a function named divisors/Divisors that takes an integer n > 1 and returns an array with all of the integer's divisors(except for 1 and the number itself), from smallest to largest. If the number is prime return the string '(integer) is prime' (null in C#) (use Either String a in Haskell and Result<Vec<u32>, String> in Rust).</p>

        <h4 class="mb-3">Résultat du kata</h4>
        <div class="mb-5">
            <pre><code class="php">
&lt?php

function divisors($integer)
{
    $arrayIntegerDivisors = [];

    for ($i = 2; $i <= $integer - 1; $i++)
        $integer % $i === 0 ? $arrayIntegerDivisors[] = $i : '';
    
    return empty($arrayIntegerDivisors) ? $integer . " is prime" : $arrayIntegerDivisors;
}

print_r(divisors(15));
            </code></pre>
        </div>
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
    {% elseif kata == "multiple3or5"%}

    <div class="divider"><span></span><span>{{kata}}</span><span></span></div>
    <div class="section-row">
        <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
            Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.
            Note: If the number is a multiple of both 3 and 5, only count it once.</p>
        <h4 class="mb-3">Résultat du kata</h4>
        <div class="mb-5">
            <pre><code class="php">
&lt?php

function solution($number)
{
    $arrayInt = [];

    for ($i = 0; $i < $number; $i++)
       ($i % 3 === 0 || $i % 5 === 0) ? $arrayInt[] = $i : '';

    return array_sum($arrayInt);
}

var_dump(solution(10));
            </code></pre>
        </div>
    {% elseif kata == "pileOfCube"%}

    <div class="divider"><span></span><span>{{kata}}</span><span></span></div>
    <div class="section-row">
        <p>
        Your task is to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cube above will have volume of (n-1)^3 and so on until the top which will have a volume of 1^3.
        You are given the total volume m of the building. Being given m can you find the number n of cubes you will have to build?
        The parameter of the function findNb (find_nb, find-nb, findNb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + ... + 1^3 = m if such a n exists or -1 if there is no such n.</p>
        <h4 class="mb-3">Résultat du kata</h4>
        <div class="mb-5">
            <pre><code class="php">
&lt?php

function findNb($m)
{
    $n = 0;

    while ($m > 0)
    {
        $m -= ++$n**3;
    }

    return $m ? -1 : $n;
}
            </code></pre>
        </div>
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
    {% elseif kata == "shortestWord"%}

    <div class="divider"><span></span><span>{{kata}}</span><span></span></div>
    <div class="section-row">
        <p>
            Simple, given a string of words, return the length of the shortest word(s).
            String will never be empty and you do not need to account for different data types.
        </h4>
        <div class="mb-5">
            <pre><code class="php">
&lt?php

function findShort($str)
{
    $arrayWords = explode(" ", $str);

    $lengthWords = array_map('strlen', $arrayWords);

    return min($lengthWords);
}

function findShortBestPractice($str)
{
    return min(array_map("strlen", explode(" ", $str)));
}

var_dump(findShort("bitcoin take over the world maybe who knows perhaps"));
            </code></pre>
        </div>
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
    {% elseif kata == "tortoiseRacing"%}

    <div class="divider"><span></span><span>{{kata}}</span><span></span></div>
    <div class="section-row">
        <p>
            Two tortoises named A and B must run a race. A starts with an average speed of 720 feet per hour. Young B knows she runs faster than A, and furthermore has not finished her cabbage.
            When she starts, at last, she can see that A has a 70 feet lead but B's speed is 850 feet per hour. How long will it take B to catch A?
            More generally: given two speeds v1 (A's speed, integer > 0) and v2 (B's speed, integer > 0) and a lead g (integer > 0) how long will it take B to catch A?
            The result will be an array [hour, min, sec] which is the time needed in hours, minutes and seconds (round down to the nearest second) or a string in some languages.
            If v1 >= v2 then return nil, nothing, null, None or {-1, -1, -1} for C++, C, Go, Nim, [] for Kotlin or "-1 -1 -1".'
        </h4>
        <div class="mb-5">
            <pre><code class="php">
&lt?php

function race($v1, $v2, $g)
{
    if ($v1 >= $v2)
    {
        return null;
    }
    else
    {
        $differenceSpeed = $v2 - $v1;
        $decimalTime = $g / $differenceSpeed;
        
        $seconde = $decimalTime * 3600;
        $hour = floor($decimalTime);
        $seconde -= $hour * 3600;
        $minutes = floor($seconde / 60);
        $seconde -= $minutes * 60;
    
        return [$hour, $minutes, floor($seconde)];
    }
};

function bestPracticeRace($v1, $v2, $g) 
{
    if($v1 >= $v2) return null;
    $h = $g / ($v2 - $v1);
    return [floor($h), (floor($h * 60) % 60), floor($h * 3600) % 60];
}


 print_r(race(80, 91, 37));
            </code></pre>
        </div>
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
{# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ #}
    {% elseif kata == "uniqueOrder"%}

    <div class="divider"><span></span><span>{{kata}}</span><span></span></div>
    <div class="section-row">
        <p>
            Implement the function unique_in_order which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements..
        </h4>
        <div class="mb-5">
            <pre><code class="php">
&lt?php

function uniqueInOrder($iterable)
{
    $ret = [];

    $arrayString = is_string($iterable) ? str_split($iterable) : $iterable;   

    foreach ($arrayString as $key => $value)
    {
        if ($value === ",")
            unset($arrayString[$key]);
        else
            $value != end($ret) ? $ret[] = $value : '';
    }
    
    return $ret;
}

print_r(uniqueInOrder('AAAABBBCCDAABBB'));
echo '<br/>';
print_r(uniqueInOrder('ABBCcAD'));
echo '<br/>';
print_r(uniqueInOrder([1,2,2,3,3]));
            </code></pre>
        </div>
    {% endif %}
    </div>
</section>

{% endblock %}